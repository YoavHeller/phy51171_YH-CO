Code Structure

The code is structured into these modules:
Production, analysis and design.

Production

Use- runs the simulation.

Classes
	
class Particle-
Represents individual particles in the simulation
Attributes-  position(x), velocity(v), charge(q) and mass(m).
functions
iter- returns all the attributes
update_particle_positions(dt): Updates particle positions based on their velocities.
update_particle_velocities(field): Updates velocitites for given field.
applied_field: takes a field and calculates the lineary averaged field on the particle

class Field-
Represents the electric field in 1D
Attributes- dx grid size, grid_pos array of positions of the grid points, num of cells, field, frequencies and FFT of field
Functions:
innit- defined by left border(Xi), right border(Xf), and number of cells(num_cells)
iter- returns 
compute_density()- takes particles and returns their density in the grid points in different methods
density_field- calculates the electric field from the density. puts in the value of field and field_FFT


class PicSimulation-
Core class that sets up and manages the simulation parameters (e.g., number of particles, time step) and advances the simulation in time.
Also stores the data over time.

Attributes- order_den: density calculation method, 0/1/2. dt: time steps. field, particles, and data.

Functions
innit- input:particle_positions, particle_velocities, q, m, Xi, Xf, num_cells, dt, 
save_field=false,save_FFT=false,save_pos=false,save_vel=false, order_den=0
creates the array particles, the field, and updates the field and the velocities to be in t= -dt/2.
saves the initial values.
initialize_particles()- arrays of positions and velocities into an array of particles
initialize_half_velocity- calculates the velocoties at t=-dt/2
update_pos- moves all the particles in dt
update field- updates field from particles
update_velocities- updates velocities with applied field
time step- updates positions, update feild, update velocities and saves requested data
run simulation(num_steps)- runs the simulation for num_steps times and return the data

main loop- define with initial values, run and save.

 2. Analysis
https://chatgpt.com/share/67337861-bef4-800b-8e27-f17d97a355fc

Classes
DataProcessor
 Class to handle the raw simulation data from the PicSimulation and compute quantities like kinetic energy, potential energy, and momentum. 

Functions
Any calculation for data we’d like to extrapolate: energy, momentum, FFT.
“The dynamics of phase or velocity or distribution function space may be of interest in which case a movie might be made, probably from snapshots every dt or 2*dt”
export_data()
Saves processed data in a structured format (e.g., CSV or JSON) for further use.


3. Visualization
Classes
Visualizer
 A class that reads processed data and provides plotting capabilities.

Functions
Any visualisation we’d like to create. For example:    
plot_density_profile()
Plots the density profile over time or at a specific time step.
plot_field_profile()
Plots the electric field distribution at a specific time step.
plot_energy_vs_time()
 Plots kinetic and potential energy as a function of time to check energy conservation.
animate_particles()
Generates an animation showing particle positions over time.

---

Main script
     - Import the `simulation`, `analysis`, and `visualization` modules.
     - Create an instance of `PICSimulation` specifying the initial and parameters, aswell as the required data. call `run_simulation()` to generate data.
     - Pass the output data to `DataProcessor` for analysis.
     - Use `Visualizer` to visualize and animate the results.

